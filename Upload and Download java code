package com.*****.utils;

import java.io.File;
import java.io.InputStream;
import java.util.List;

import com.hlfdxp.constants.RefreshConstants;
import com.hlfdxp.reports.ReportLog;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.mvi.enums.SFTP;

public class SftpUtils {
	public static void invokeBatchJob(String batchJobName) {
		JSch jsch = new JSch();
		Session session = null;
		Channel channel = null;
		try {
			session = jsch.getSession(RefreshConstants.getRefreshUserName(), RefreshConstants.getRefreshHostName(),
					Integer.parseInt(RefreshConstants.getRefreshPortId()));
			var pwd = RefreshConstants.getRefreshPwd();
			session.setPassword(pwd);
			session.setConfig("StrictHostKeyChecking", "no");
			session.connect();
			channel = session.openChannel("exec");
			System.out.println("curl -k https://" + RefreshConstants.getRefreshHostName() + ":"
					+ RefreshConstants.getRefreshServicePortId() + "/launchjob?jobName=" + batchJobName);
			((ChannelExec) channel).setCommand("curl -k https://" + RefreshConstants.getRefreshHostName() + ":"
					+ RefreshConstants.getRefreshServicePortId() + "/launchjob?jobName=" + batchJobName);
			channel.setInputStream(null);
			((ChannelExec) channel).setErrStream(System.err);
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					System.out.print(new String(tmp, 0, i));
				}
				if (channel.isClosed()) {
					System.out.println("exit-status: " + channel.getExitStatus());
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
					System.out.println("Exception Occurred while invoking the batch job");
				}
			}
			System.out.println("Invoked the " + batchJobName + "   batch Job successfully.");
			Common.waitForElement(3);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			channel.disconnect();
			session.disconnect();
		}
	}

	public static void downloadORUpload(List<String> listOfFiles, String remoteFileLoc, SFTP actionType) {
		JSch jsch = new JSch();
		Session session = null;
		ChannelSftp sftpChannel = null;
		Channel channel = null;
		try {
			session = jsch.getSession(RefreshConstants.getRefreshUserName(), RefreshConstants.getRefreshHostName(),
					Integer.parseInt(RefreshConstants.getRefreshPortId()));
			var pwd = RefreshConstants.getRefreshPwd();
			session.setPassword(pwd);
			session.setConfig("StrictHostKeyChecking", "no");
			session.connect();
			channel = session.openChannel("sftp");
			channel.connect();
			sftpChannel = (ChannelSftp) channel;
			switch (actionType) {
			case UPLOAD:
				for (String file : listOfFiles) {
					sftpChannel.put(file, remoteFileLoc);
					System.out.println(file + " : File Uploaded Successfully");
				}
				break;
			case DOWNLOAD:
				for (String file : listOfFiles) {
					sftpChannel.get(file, remoteFileLoc);
				}
				break;
			default:
				break;
			}
		} catch (SftpException | JSchException e) {
			e.printStackTrace();
			System.out.println("Exception occurred while uploading the files!!!!!!!!! Please check");
		} finally {
			sftpChannel.exit();
			session.disconnect();
			channel.disconnect();
		}
	}

	public static boolean downloadAndSave(String fileName, String remoteFileLoc) {
		boolean isMatched = false;
		JSch jsch = new JSch();
		Session session = null;
		ChannelSftp sftpChannel = null;
		Channel channel = null;
		File dir = new File(remoteFileLoc);
		File[] dirContent = dir.listFiles();
		try {
			session = jsch.getSession(RefreshConstants.getRefreshUserName(), RefreshConstants.getRefreshHostName(),
					Integer.parseInt(RefreshConstants.getRefreshPortId()));
			jsch.addIdentity(RefreshConstants.getRefreshFilesPath());
			session.setConfig("StrictHostKeyChecking", "no");
			session.connect();
			channel = session.openChannel("sftp");
			channel.connect();
			sftpChannel = (ChannelSftp) channel;

			sftpChannel.get(fileName, remoteFileLoc);
			for (int i = 0; i < dirContent.length; i++) {
				if (dirContent[i].getName().equals(fileName)) {
					isMatched = true;
					ReportLog.info("Expected text :: " + "<b style=\"color:green;\">"
							+ " </b> :: File Successfully Downloaded :: " + "<b style=\"color:green;\"></b>");
				} else {
					ReportLog.fail("Expected text ::  " + "<b style=\"color:red;\"> </b>"
							+ " :: Exception occurred while Downloading the files  :: "
							+ "<b style=\"color:red;\"> </b>");
				}
			}
		} catch (SftpException | JSchException e) {
			e.printStackTrace();
			System.out.println("Exception occurred while Downloading the files!!!!!!!!! Please check");
		} finally {
			sftpChannel.exit();
			session.disconnect();
			channel.disconnect();
		}
		return isMatched;
	}
	
	//To delete the file 
		public static void deleteFile(){
			File f=new File("F:\\AutomationFile\\HLF-Automation\\test-output\\inputFiles");
			String s[]=f.list();
			for(String s1:s)
			{   
				File f1=new File(f,s1);
				f1.delete();
			}
			System.out.println("File Deleted Successfully");
		}
		
}
